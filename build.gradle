plugins {
  id 'java'
  id 'pmd'
  id 'jacoco'
  id 'checkstyle'
  id 'com.github.spotbugs' version '4.5.1'
  id 'de.jansauer.printcoverage' version '2.0.0'
}

group 'org.coursera'
version '2.0.1-SNAPSHOT'

description = 'Metrics StatsD'

java {
  java.sourceCompatibility = JavaVersion.VERSION_1_8
}

repositories {
  mavenLocal()
  maven {
    url = uri('https://repo.maven.apache.org/maven2/')
  }
  jcenter()
}

ext {}

dependencies {
  implementation 'io.dropwizard:dropwizard-metrics:1.3.4'
  implementation 'io.dropwizard.metrics:metrics-core:4.0.2'
  implementation 'org.apache.httpcomponents:fluent-hc:4.5.5'
  implementation 'com.fasterxml.jackson.core:jackson-databind:2.9.6'
  implementation 'com.datadoghq:java-dogstatsd-client:2.6.1'

  testImplementation 'junit:junit:4.12'
  testImplementation 'com.alibaba:dns-cache-manipulator:1.5.1'
  testImplementation 'org.easytesting:fest-assert-core:2.0M10'
  testImplementation 'org.mockito:mockito-all:1.10.19'
  testImplementation 'org.slf4j:slf4j-simple:1.7.25'

  spotbugs 'com.github.spotbugs:spotbugs:4.0.0'
}

test {
  useJUnit()

  maxHeapSize = '1G'
  finalizedBy jacocoTestReport, jacocoTestCoverageVerification
}

jacocoTestReport {
  dependsOn test

  reports {
    xml.enabled true
    html.enabled true
  }

  afterEvaluate {
    // noinspection GroovyAssignabilityCheck
    getClassDirectories()
        .setFrom(
            files(
                getClassDirectories()
                    .files
                    .collect {
                      fileTree(
                          dir: it,
                          excludes: [
                              '**/Main.class'
                          ]
                      )
                    }
            )
        )
  }
}

jacocoTestCoverageVerification {
  violationRules {
    rule {
      element = "CLASS"
      excludes = [
          'Main'
      ]
      limit {
        counter = 'LINE'
        value = 'COVEREDRATIO'
        minimum = 0.85
      }
    }
  }
}

printcoverage {
  coverageType = 'LINE'
}

pmd {
  consoleOutput = true
  incrementalAnalysis.set(false)
  toolVersion '6.21.0'
  reportsDir = file("$project.buildDir/reports/pmd")
  ruleSets = []
  ruleSetFiles "$projectDir/config/pmd/pmd.xml"
}

checkstyle {
  toolVersion = '8.35'
  configFile = file("$projectDir/config/checkstyle/checkstyle.xml")
  showViolations = true
  ignoreFailures = false
}

checkstyleTest {
  enabled = false
}

tasks.withType(Checkstyle) {
  reports {
    xml.enabled false
    html.enabled true
    html.destination rootProject.file("build/reports/checkstyle/checkstyle.html")
    html.stylesheet resources.text.fromFile('config/checkstyle/stylesheet.xsl')
  }
}

spotbugs {
  ignoreFailures = false
  toolVersion = "3.0.1"
  excludeFilter = file("config/spotbugs/exclude-filter.xml")
  reportsDir = file("$project.buildDir/reports/spotbugs")
  effort = "max"
}

spotbugsMain {
  reports {
    html {
      enabled = true
      destination = file("$buildDir/reports/spotbugs/main/spotbugs.html")
      stylesheet = 'fancy-hist.xsl'
    }
  }
}

spotbugsTest {
  reports {
    html {
      enabled = true
      destination = file("$buildDir/reports/spotbugs/test/spotbugs.html")
      stylesheet = 'fancy-hist.xsl'
    }
  }
}

task codeQuality(type: GradleBuild) {
  tasks = [
      'pmdMain',
      'pmdTest',
      'checkstyleMain',
      'checkstyleTest',
      'spotbugsMain',
      'spotbugsTest'
  ]
}

task codeCoverage(type: GradleBuild) {
  tasks = [
      'test',
      'printCoverage'
  ]
}